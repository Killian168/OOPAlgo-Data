/**
 * 
 */
package infixToPostfix;

import java.util.HashMap;
import java.util.Map;

import javax.swing.JOptionPane;

/**
 * @author killian
 * @version 25/01/2019
 */
public class MainDriver {

	// Member Data
	private String UserInput;

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		MainDriver m = new MainDriver();
	}// End main

	// Main driver method
	public MainDriver() {

		boolean error;

		// Do While for Program display until accepted input
		do {

			error = false;

			// Gets users input
			UserInput = getInput(error);

			// Error checks
			error = checkInput(UserInput);

		} while (error == true); // Re-show panel if error

		toPostfix(UserInput);

	}// End constructor

	// Turn string into postfix notation
	private void toPostfix(String s) {

		String str = null;
		ArrayStack myStack = new ArrayStack();

		// Create a hash map
		Map<String, Integer> hm = new HashMap<String, Integer>();
		
		// Put elements to the map
		hm.put("+", 4);
		hm.put("-", 3);
		hm.put("*", 6);
		hm.put("/", 5);
		hm.put("^", 7);
		hm.put("(", 2);
		hm.put(")", 8);
		
		// Transfers string to char array
		char[] charArray = s.toCharArray();

		for (int i = 0; i < charArray.length; i++) {

			if (Character.isDigit(charArray[i])) {
				// Append to output string
				str += charArray[i];
			} else {
				
				if((hm.get(charArray[i])>hm.get(myStack.top())) || (myStack.isEmpty()) || (myStack.equals('('))) {
					myStack.push(charArray[i]);
				}
				else {
					while((hm.get(charArray[i])>hm.get(myStack.top()))) {
						
					}
				}
			}

		}

	}// End toPostfix

	// Gets input from the user
	private String getInput(boolean error) {

		// Tell user what is wrong
		if (error == true) {
			JOptionPane.showMessageDialog(null, "You must enter an equatino using single digits 0-9 "
					+ "and +, -, *, /, ^, (, )\nAnd it must be" + "between 3 and 20 charachter long");
		} // end if

		// Asks user for input
		return JOptionPane.showInputDialog("Please input your equation in postfix notation");

	}// end getInput

	// Checks input
	private boolean checkInput(String str) {

		// If char length is out of bounds return error = true
		if ((str.length() < 3) || (str.length() > 20)) {
			return true;
		} else {

			// Transfers string to char array
			char[] charArray = str.toCharArray();

			// Checks for errors
			for (int i = 0; i < charArray.length; i++) {

				// Check input
				switch (charArray[i]) {
				case '0':
					break;
				case '1':
					break;
				case '2':
					break;
				case '3':
					break;
				case '4':
					break;
				case '5':
					break;
				case '6':
					break;
				case '7':
					break;
				case '8':
					break;
				case '9':
					break;
				case '+':
					break;
				case '-':
					break;
				case '*':
					break;
				case '/':
					break;
				case '^':
					break;
				case '(':
					break;
				case ')':
					break;
				default:
					return true;
				}// End switch

			} // End for

		} // end else

		return false;

	}// End checkInput

}
